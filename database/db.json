{
  "users": [
    {
      "id": "7830e5903b889750f1e3",
      "email": "sumitsaha@learnwithsumit.com",
      "firstName": "Sumit",
      "lastName": "Saha",
      "avatar": "avatar-1708764729322-387087910.png",
      "bio": "A Full Stack Web Application Developer from Bangladesh üáßüá© & a Programming Content Creator. Spend most of time coding outstanding projects or creating contents",
      "password": "$2b$08$l8LuMMePmC0u.SdhhsMfqeo34HAF/o70eagtLO8V4HiHUyphNgu3q",
      "favourites": []
    },
    {
      "id": "346d7a36b3c41f3fbfa2",
      "email": "tapasadhikary@learnwithsumit.com",
      "firstName": "Tapas",
      "lastName": "Adhikary",
      "avatar": "avatar-1708764766479-243448656.png",
      "bio": "Creating content is my passion. After spending over a decade in software engineering, I'm on a mission to make learning easy, and practical. I create written and video content on JavaScript, Web Development, Full Stack, and Career development.",
      "password": "$2b$08$p15BeTInMoszGTNI3gtwNu2XiSadWVdPXaxQPQy8XZd1jj/6yPQae",
      "favourites": []
    },
    {
      "id": "f810ae24754a6cdc6d01",
      "email": "akash@learnwithsumit.com",
      "firstName": "Akash",
      "lastName": "Ahmed",
      "avatar": "avatar-1708764802524-290642702.png",
      "bio": "I am a junior web developer, experience with web applications and building websites.",
      "password": "$2b$08$FJn3tesDW9nqExgPr0MqKulICwf5B9FABPn1MjnImf2cXFm5o20KC",
      "favourites": []
    },
    {
      "id": "3d2dde4b6548275fb066",
      "email": "saadhasan@learnwithsumit.com",
      "firstName": "Saad",
      "lastName": "Hasan",
      "avatar": "avatar-1708764856675-623317122.jpg",
      "bio": "I am Saad Hasan, self-taught Junior Software Developer from Bangladesh. I have been working as a Professional Frontend Developer for the last 1 year, Though I started my Self-Taught Programming Journey In 2014.",
      "password": "$2b$08$e9uY0ZjxXJ9F4r36Ln4oCu4nLZ92OKaQ466VEVDtxBPCs/JL/ChR.",
      "favourites": [
        {
          "id": "7c12b4b48531bcc995ae",
          "title": "A guide to Prototype in JavaScript",
          "tags": "programming, algorithm, prototype, javascript"
        }
      ]
    },
    {
      "id": "65aff389f1822a5e9f43",
      "email": "salahuddin@learnwithsumit.com",
      "firstName": "Md",
      "lastName": "salahuddin",
      "avatar": "avatar-1708882452726-336021919.jpeg",
      "bio": "IM SALAHUDDIN\r\n",
      "password": "$2b$08$At/U5W1/ASt/F3zWCqOZnO75ftNVjwR.RVf0FEhEdQ0nHkll5tJ4m",
      "favourites": []
    },
    {
      "id": "ada864bc60e6e87bf05c",
      "email": "saad.hasan2@gmail.com",
      "firstName": "Saad",
      "lastName": "Hasan",
      "avatar": "avatar-1723562654513-439844259.jpeg",
      "bio": "IM SAAD",
      "password": "$2a$08$aLtdUX3vnRMOEjdlddLHOO04MHxBZlsWr4yWBsUZQxG9vLolDnW/u",
      "favourites": [
        {
          "id": "7c12b4b48531bcc995ae",
          "title": "A guide to Prototype in JavaScript",
          "tags": "programming, algorithm, prototype, javascript"
        }
      ]
    },
    {
      "id": "3984cf5b6c8880def073",
      "email": "priomshads@gmail.com",
      "firstName": "Abrar",
      "lastName": "Fahim",
      "avatar": "avatar-1719777861144-897632300.jpg",
      "bio": "This is abrar fahim, edited 2",
      "password": "$2a$08$GeHgrC4w7GDOHTYxb6LDneDRxjVz0dJ.J0qYSyrdKuCzLKg98qsje",
      "favourites": []
    },
    {
      "id": "ffdff231e124beddef7e",
      "email": "minhaz@yahoo.com",
      "firstName": "Minhaz",
      "lastName": "Sharif",
      "avatar": null,
      "bio": "",
      "password": "$2a$08$/3JrtdJ0D0.junjQH9BiQOEqj7yyg70EOQH8O9s/yPxGUSUeByAaq",
      "favourites": []
    },
    {
      "id": "264273c5242ae5e85789",
      "email": "sharif@yahoo.com",
      "firstName": "Minhaz",
      "lastName": "Sharif",
      "avatar": null,
      "bio": "",
      "password": "$2a$08$xWSpiye.UF2T2FS0eK7tPukxCNQ2RAxJMC2TyVfHd/ktNSe.MXXv2",
      "favourites": []
    },
    {
      "id": "45257d03408280768e27",
      "email": "minhaz@gmail.com",
      "firstName": "Minhaz",
      "lastName": "Sharif",
      "avatar": null,
      "bio": "",
      "password": "$2a$08$r2OEwTEez4tl1XujPiSUBOk5VQsfcvNsrgd1Tq650d5TCRXfh4yRm",
      "favourites": []
    }
  ],
  "blogs": [
    {
      "id": "7c12b4b48531bcc995ae",
      "title": "A guide to Prototype in JavaScript",
      "content": "Developers may construct interactive and dynamic online apps with the robust programming language ‚Äî JavaScript. The prototype is one of the most crucial ideas in JavaScript since it allows objects to share functionality.\n\n\nPrototypes in JavaScript\nEvery object in JavaScript has a prototype, which serves as the object‚Äôs bare bones. The methods and properties that an object will inherit are specified in the prototype. An object inherits all of its prototype‚Äôs properties and functions when you create a new one. \nIn this example, we define the Person constructor function, which has the two inputs of name and age. The Person prototype then gets a new method called sayHello that logs a welcome message to the console.\n\nThe new keyword is then used to create a new Person object called sumit. JavaScript searches the prototype chain of the sumit object for the sayHello method when the sayHello method is called on the sumit object. As the sayHello method is present in the Person prototype, JavaScript locates it and uses it to greet the sumit object.\n\nBecause you may share functionality amongst objects without having to write duplicate code, prototypes are crucial in JavaScript. For instance, you could simply create a new object and set its prototype to be the Person prototype if you wanted to create another object that had the same sayHello method as the Person object",
      "thumbnail": "thumbnail-1708765741114-630266656.png",
      "author": {
        "id": "3984cf5b6c8880def073",
        "firstName": "Abrar",
        "lastName": "Fahim",
        "avatar": "avatar-1719777861144-897632300.jpg"
      },
      "tags": "programming, algorithm, prototype, javascript",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        },
        {
          "id": "f810ae24754a6cdc6d01"
        },
        {
          "id": "3d2dde4b6548275fb066"
        }
      ],
      "comments": [
        {
          "id": "83fbf83e7a33ca0ac1ea",
          "content": "‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
          "author": {
            "id": "346d7a36b3c41f3fbfa2",
            "firstName": "Tapas",
            "lastName": "Adhikary",
            "avatar": "avatar-1708764766479-243448656.png"
          }
        },
        {
          "id": "a6cb6149982d6641fdcf",
          "content": "Thank you for this wonderful video. Learning JS for last 1 year and this 'new' key word was giving me headache. I was searching for a better explanation for last one month. Even though I have found some, nothing beats learning in mother tongue. Great job.",
          "author": {
            "id": "f810ae24754a6cdc6d01",
            "firstName": "Akash",
            "lastName": "Ahmed",
            "avatar": "avatar-1708764802524-290642702.png"
          }
        },
        {
          "id": "48554b3ebbc9a9a5187c",
          "content": "‡¶Ü‡¶Æ‡¶ø JavaScript ‡¶è‡¶∞ ‡¶Ö‡¶®‡ßá‡¶ï  ‡¶ü‡¶ø‡¶â‡¶ü‡ßã‡¶∞‡¶ø‡ßü‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßá‡¶õ‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶á‡ßü‡¶æ‡¶¶‡ßá‡¶∞ channel ‡¶•‡ßá‡¶ï‡ßá‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶π‡ßü, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡¶æ‡¶á‡¶¶‡ßá‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶π‡ßü‡¶§‡ßã ‡¶¨‡¶ø‡¶ó‡¶ø‡¶®‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶≠‡ßÄ‡¶§‡ßÅ ‡¶ï‡¶∞‡¶æ, ‡¶≠‡¶æ‡¶ó‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá ‡¶∏‡¶π‡¶ú ‡¶¨‡¶ø‡¶∑‡ßü ‡¶ï‡¶†‡¶ø‡¶® ‡¶ï‡¶∞‡ßá ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶®‡ßã‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶¶‡¶Æ‡¶á ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶®‡¶æ‡•§ ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶•‡ßá- ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶ó‡¶ø‡¶®‡¶æ‡¶∞‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶¨‡•§‡•§ ‡¶Ö‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶≠‡¶æ‡¶á‡ßü‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá‡•§",
          "author": {
            "id": "3d2dde4b6548275fb066",
            "firstName": "Saad",
            "lastName": "Hasan",
            "avatar": "avatar-1708764856675-623317122.jpg"
          }
        },
        {
          "id": "6bef8f9e88cda532e91f",
          "content": "nice post",
          "author": {
            "id": "ada864bc60e6e87bf05c",
            "firstName": "Saad",
            "lastName": "Hasan",
            "avatar": "avatar-1723562654513-439844259.jpeg"
          }
        },
        {
          "id": "ae87f67e9ca96589a5a1",
          "content": "hello hi",
          "author": {
            "id": "ada864bc60e6e87bf05c",
            "firstName": "Saad",
            "lastName": "Hasan",
            "avatar": "avatar-1723562654513-439844259.jpeg"
          }
        }
      ],
      "createdAt": "2024-02-24T09:09:01.121Z"
    },
    {
      "id": "4321b782f360f58c8c85",
      "title": "Scope and Scope Chain in JavaScript",
      "content": "In Simple, we can assume Scope as the area, where our program can access our declared variables. Simple is that. There is no Rocket Science behind this to get confused.\n\nBut there are some types of Scope, and we need to understand the differences and how it works. Cause, In larger projects it will help us to avoid collisions.\n\nSo there are 3 types of Scope in JavaScript:\n\n1. Global Scope\n\n2. Function Scope\n\n3. Block Scope.\n\nGlobal Scope:\n\nGlobal Scope is a global area of our JavaScript Codes. It is a default Scope. Any Variable or function that‚Äôs not inside any function or block, is inside the global scope by default. So everything we write in our code is into the Global Scope or Globally accessible.\n\nLet‚Äôs See an Example:\n\n\nSo, in the example, we declared the name variable and the showName() function in the Global Scope. We can get the value of the name and invoke showName() function from anywhere. That‚Äôs we are able to access the name variable from inside the showName() function.\n\nFunctional Scope:\n\nFunctional scope is also known as Local Scope. In functional Scope, variables are declared into a function which means between the curly brackets. And most importantly those variables are only accessible into the function. We can access those variables outside of the function.\n\nLet‚Äôs see an example:\n\n\nSo, We can see that we cannot access the variables which are declared in the functional scope outside of that function. And also we can see that functional scope creates its own environment and it doesn‚Äôt modify the global variables (name variable remains ‚ÄòTamim‚Äô )\n\nBlock Scope:\n\nSo, Block Scope is almost similar to Function Scope but just applicable for let and const. The area between if/else, loop or switch case is considered as block scope. The declared let/const variables can only be accessed into the scope. But It differs when it comes to the var. We can access the ‚Äòvar‚Äô variables outside of the block scopes.\n\nLet‚Äôs see an Example:\n\n\nScope Chaining:\n\nScope Chaining is another important concept in JavaScript. Actually, It‚Äôs the behavior of JavaScript, how the program will act, or which variable will javaScript pick at a certain point. As we know till now about the three scopes, When JavaScript runs, the browser scope tries to find a variable value in the current scope. If it could not find the value, It tries to go outside of the current scope to find out the value. And it will continue this process until it finds out the variable value or it reaches the Global Scope. In the end, if It fails to find out the value of the variable it will throw a ‚ÄòReferenceError‚Äô or print undefined. And try to relate it by yourself.",
      "thumbnail": "thumbnail-1708765297564-606798153.png",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "JavaScript, Async, Scope",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        }
      ],
      "comments": [
        {
          "id": "19becccf4ebf3e6cf385",
          "content": "‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
          "author": {
            "id": "346d7a36b3c41f3fbfa2",
            "firstName": "Tapas",
            "lastName": "Adhikary",
            "avatar": "avatar-1708764766479-243448656.png"
          }
        }
      ],
      "createdAt": "2024-02-24T09:01:37.581Z",
      "isFavourite": false
    },
    {
      "id": "4321b782f360f58c8c86",
      "title": "‡¶è‡¶®‡ßç‡¶°‡ßç‡¶∞‡ßü‡ßá‡¶° ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶∂‡¶®",
      "content": "‡¶è‡¶®‡ßç‡¶°‡ßç‡¶∞‡ßü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶≤‡¶≤‡¶ø‡¶™‡¶™ ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡¶æ‡¶∂‡¶æ‡¶™‡¶æ‡¶∂‡¶ø ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∑‡ßü‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶≤‡¶≤‡¶ø‡¶™‡¶™ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶æ‡¶® ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ‡¶ï ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¶‡ßç‡¶≠‡ßÅ‡¶§ ‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§‡¶æ‡ßü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡•§ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá, ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶™ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡ßã‡¶™‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶§‡¶æ‡¶∞ ‡¶è‡¶™ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ Storage, Camera, Contacts, Location‡¶Ö‡¶•‡¶¨‡¶æ Microphone ‡¶∏‡¶π ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶∞‡¶ø‡ßü‡¶æ‡¶§‡ßá ‡¶π‡¶æ‡¶§ ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶§‡ßÉ‡¶ï ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡ßü‡ßá ‡¶§‡¶æ‡¶∞‡¶™‡¶∞‡ßá‡¶á ‡¶π‡¶æ‡¶§‡¶æ ‡¶π‡¶æ‡¶§‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶≠‡ßá‡¶¨‡ßá‡¶á ‡¶è‡¶á ‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡¶ü‡¶ø ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§‡¶æ‡ßü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡•§ ‡¶ï‡¶æ‡¶∞‡¶£, ‡¶Ü‡¶Æ‡¶∞‡¶æ (‡ßØ‡ß¶% ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑) ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶ì‡ßü‡¶æ‡¶∏‡ßç‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶™ ‡¶ï‡¶ø ‡¶ï‡¶ø ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ Terms & Condition ‡¶è ‡¶ï‡¶ø ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßá‡¶ü ‡¶®‡¶æ ‡¶™‡ßú‡ßá‡¶á ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶§‡ßá Allow ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶á (‡¶Ü‡¶Æ‡¶ø‡¶ì ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶®‡¶á ü§ì )‡•§ ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ö‡¶®‡ßá‡¶ï‡¶ü‡¶æ ‡¶ù‡ßÅ‡¶ï‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡¶æ‡¶á ‡¶∞‡ßü‡ßá‡¶õ‡ßá (‡¶π‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶∞) ‡¶Ø‡¶æ‡¶∞‡¶æ RAT ‡¶¨‡¶æ ‡¶ü‡ßç‡¶∞‡¶ú‡¶æ‡¶® ‡¶π‡¶∞‡ßç‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≠‡¶ø‡¶ï‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßá ‡¶ö‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡•§ ‡¶§‡¶æ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá ‡¶¨‡¶ø‡¶∑‡ßü‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶¨‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡ßá‡¶ñ‡¶¨‡ßã ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∞‡¶æ‡¶®‡¶ü‡¶æ‡¶á‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßã ‡•§ üòÅ \n ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡¶§‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶á AndroidManifest.xml ‡¶è ‡¶™‡¶æ‡¶∞‡ßç‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá",
      "thumbnail": "thumbnail-1708765297564-606798153.png",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "android, java, kotlin, permission",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        }
      ],
      "comments": [
        {
          "id": "19becccf4ebf3e6cf385",
          "content": "‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
          "author": {
            "id": "346d7a36b3c41f3fbfa2",
            "firstName": "Tapas",
            "lastName": "Adhikary",
            "avatar": "avatar-1708764766479-243448656.png"
          }
        }
      ],
      "createdAt": "2024-02-24T09:01:37.581Z",
      "isFavourite": false
    },
    {
      "id": "4321b782f360f58c8c87",
      "title": "Create Custom Dialog with listview | Android | Java",
      "content": "Often we might need to create a custom dialog with listview to choose different kinds of actions for a particular option. In certain cases, we use such type of menu items for menus. So, In this post, I will show you how you can create this Custom Dialog with Listview :",
      "thumbnail": "thumbnail-1708765297564-606798153.png",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "android, java, kotlin, permission",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        }
      ],
      "comments": [],
      "createdAt": "2024-02-24T09:01:37.581Z",
      "isFavourite": false
    },
    {
      "id": "4321b782f360f58c8c88",
      "title": "JSON Parse | Android | Java",
      "content": "JSON stands for JavaScript Object Notation. It is structured, lightweight, human-readable and easy to parse. It‚Äôs the best alternative to XML when our android app needs to interchange data from the server. XML parsing is very complex as compare to JSON parsing. First, We have to understand how JSON works. JSON contains Objects, Arrays and key and value. An object is represented by Curly Braces: ‚Äú{}‚Äù, Array is represented by Square Brackets: ‚Äú[]‚Äù Everything between curly braces :{} is called JSON Object & everything between square brackets : [] is a JSON Object. A JSON object can contain different key-value pairs. The value of a key can be an Array. And Array may contain different Objects. And Multiple objects are separated by a comma. Seems difficult?\n\nNo, It‚Äôs not. See the Sample JSON file which will help you to understand it by your own and we will use this to fetch data. This JSON file is hosted on https://api.myjson.com/bins/xcuq8",
      "thumbnail": "thumbnail-4321b782f360f58c8c86.webp",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "android, java, kotlin, permission",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        }
      ],
      "comments": [],
      "createdAt": "2024-02-24T09:01:37.581Z",
      "isFavourite": false
    },
    {
      "id": "4321b782f360f58c8c89",
      "title": "React useMemo Hook",
      "content": "useMemo is used to memoize the result of a function, meaning it caches the result and returns it when the inputs to that function haven't changed since the last render. It takes two arguments: the function to memoize and an array of dependencies. If any of the dependencies change between renders, the memoized function is re-executed; otherwise, the cached result is returned.",
      "thumbnail": "thumbnail-4321b782f360f58c8c89.avif",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "android, java, kotlin, permission",
      "likes": [
        {
          "id": "346d7a36b3c41f3fbfa2"
        }
      ],
      "comments": [],
      "createdAt": "2024-02-24T09:01:37.581Z",
      "isFavourite": false
    },
    {
      "id": "6c33b31ecaa2b8917db2",
      "title": "‡¶≤‡¶ø‡¶®‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡•§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶ì ‡¶è‡¶≤‡¶ó‡ßã‡¶∞‡¶ø‡¶¶‡¶Æ",
      "content": "‡¶ó‡¶§ ‡ß´-‡ß¨ ‡¶¨‡¶õ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá Android, Fontend, Backend, Web Security ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßü ‡¶Æ‡¶®‡ßá ‡¶π‡¶≤‡ßã, ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶™‡¶∞‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶∏‡¶¨ ‡¶•‡ßá‡¶ï‡ßá important ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ü‡¶æ‡¶á ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶π‡ßü ‡¶®‡¶æ‡¶á‡•§ ‡¶Ü‡¶∞ ‡¶§‡¶æ ‡¶π‡¶≤‡ßã ‚Äú Data Structure & Algorithm ‚Äù ‡•§ ‡¶è‡¶ü‡¶ø‡¶∞ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨ ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ‡¶á‡•§\n\n‡¶§‡¶æ‡¶á Quarantine ‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶° ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ,‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá DS & Algo ‡¶§‡ßá‡¶á ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßã‡•§ ‡¶§‡¶æ‡¶á Android Studio ‡¶ï‡ßá ‡¶≤‡¶æ‡¶≤ ‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ ‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶á ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡¶õ‡¶ø, ‡¶§‡¶ñ‡¶®‡ßã ‡¶Ü‡¶Æ‡¶ø Data Structure & Algorithm ‡¶è ‡¶ñ‡ßÅ‡¶¨ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶®‡¶æ, ‡¶¨‡¶≤‡¶§‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶á ‡¶®‡¶æ‡•§ ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶¨‡¶æ‡¶ö‡ßç‡¶ö‡¶æ ‡¶Ü‡¶Æ‡¶ø‡•§ ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤‡¶§ ‡¶Ü‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡ßá‡¶á ‡¶≤‡¶ø‡¶ñ‡¶õ‡¶ø, ‡¶Ø‡ßá‡¶® ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ñ‡¶®‡ßã ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶¨‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÇ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶á ‡¶§‡¶ñ‡¶¨‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶ú‡¶æ‡¶∞‡ßç‡¶®‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ (‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶™‡ßã‡¶∑‡ßç‡¶ü ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶Ø‡ßá‡¶® ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶â ‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶æ‡ßü, ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã follow ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá )‡¶§‡¶æ‡¶á ‡¶è‡¶á ‡¶™‡ßã‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶Ç‡¶¨‡¶æ ‡¶è‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ‡¶§‡ßá Data Structure & Algorithm ‡¶®‡¶ø‡ßü‡ßá ‡¶™‡ßã‡¶∑‡ßç‡¶ü ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶§‡ßá ‡¶≠‡ßÇ‡¶≤ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï‡•§ ‡¶≠‡ßÅ‡¶≤‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡ßá‡¶ñ‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∞‡¶á‡¶≤‡ßã‡•§\n\n‡¶≤‡¶ø‡¶®‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶è‡¶≤‡¶ó‡ßã‡¶∞‡¶ø‡¶¶‡¶Æ\n\n‡¶è‡¶á ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡¶ø‡¶Ç ‡¶è‡¶≤‡¶ó‡ßã‡¶∞‡¶ø‡¶¶‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶≤‡¶ø‡¶®‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∏‡¶¨ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶π‡¶ú ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶≤‡¶ó‡ßã‡¶∞‡¶ø‡¶¶‡¶Æ‡•§ ‡¶ß‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶á ‡¶è‡¶∞ ‡¶§‡¶æ‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü ‡¶¨‡¶á ‡¶ñ‡ßÅ‡¶ú‡¶¨‡ßá‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ï ‡¶è‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ randomly ‡¶ì ‡¶ñ‡ßÅ‡¶ú‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶≤‡¶ø‡¶®‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶®‡¶ø‡¶¶‡¶ø‡¶∞‡ßç‡¶∑‡ßç‡¶ü ‡¶¨‡¶á‡¶ü‡¶ø ‡¶è‡¶ï ‡¶è‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶ú‡¶¨‡ßã‡•§\n‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶¨‡¶á ‡¶è‡¶∞ ‡¶§‡¶æ‡¶ï‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßã‡¶ú‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßã, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¨‡¶á‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶¨‡ßã‡•§ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶Ç‡¶ñ‡¶ø‡¶§ ‡¶¨‡¶á ? ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶á‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶á ‡¶§‡¶¨‡ßá ‡¶ñ‡ßã‡¶ú‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶¨‡ßã ‡¶Ü‡¶∞ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá ‡¶ñ‡ßÅ‡¶ú‡¶§‡ßá‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßã ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶Ç‡¶ñ‡¶ø‡¶§ ‡¶¨‡¶á ‡¶ü‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ö‡ßç‡¶õ‡¶ø ‡•§\n\n\n‡¶Ü‡¶ö‡ßç‡¶õ‡¶æ ‡¶ß‡¶∞‡ßÅ‡¶®, ‡¶è‡¶ï‡¶ü‡¶ø Array ‡¶Ü‡¶õ‡ßá ‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß´,‡ßß‡ß®,‡ßß‡ßÆ,‡ß®‡ß¶,‡ß®‡ß¨ ‡¶è‡¶á ‡ß´‡¶ü‡¶ø Int ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ñ‡ßÅ‡¶ú‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡ß®‡ß¶ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶ü‡¶ø array ‡¶è‡¶∞ ‡¶ï‡ßã‡¶® ‡¶™‡¶ú‡¶ø‡¶∂‡¶®/index ‡¶è ‡¶Ü‡¶õ‡ßá‡•§\n\n‡¶§‡¶¨‡ßá ‡ß®‡ß¶ ‡¶è‡¶∞ ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶ñ‡ßã‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø\n\n‡¶ß‡¶æ‡¶™-‡ßß‡¶É ‡¶ß‡¶∞‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá n ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® ‡¶Ü‡¶õ‡ßá‡•§\n\n‡¶ß‡¶æ‡¶™-‡ß®‡¶É ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ i ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡ß¶ ‡¶®‡ßá‡¶á ‡¶è‡¶¨‡¶Ç i ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® (n-1) ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶¨‡¶æ‡ßú‡¶æ‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßã‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡ßá ‡¶ß‡¶æ‡¶™-‡ß© ‡¶è ‡¶Ø‡¶æ‡¶á‡•§\n\n‡¶ß‡¶æ‡¶™-‡ß©‡¶É i ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® array ‡¶è‡¶∞ ‡¶™‡¶ú‡¶ø‡¶∂‡¶®/‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç array[i] ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü ‡¶§‡¶¨‡ßá ‡¶ß‡¶æ‡¶™‡¶É‡ß™ ‡¶è ‡¶Ø‡¶æ‡¶á ‡¶®‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶æ‡¶™‡¶É‡ß® ‡¶è ‡¶Ø‡¶æ‡¶á‡•§\n\n‡¶ß‡¶æ‡¶™-‡ß™‡¶É i ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ return ‡¶ï‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶ø ‡•§",
      "thumbnail": "thumbnail-1708765461841-967006271.png",
      "author": {
        "id": "3d2dde4b6548275fb066",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": "avatar-1708764856675-623317122.jpg"
      },
      "tags": "programming, algorithm",
      "likes": [],
      "comments": [],
      "createdAt": "2024-02-24T09:04:21.871Z"
    },
    {
      "id": "9d5598ab44600a379103",
      "title": "Dev Retro 2022: What made me a better developer this year?",
      "content": "Writing about the Dev Retro 2022 will be a bit off track if I do not discuss the journey briefly before it, which shaped my career as a blogger. The year 2021 was about writing. Writing here on my blog, freeCodeCamp, CSS-Tricks, Dev, and many other platforms.\n\nAt the end of 2021, I could establish myself as a technology blogger on the prominent platforms mentioned. The most exciting fact was that I was one of the top contributors/most-read authors on all these platforms.\n\nWhile these achievements were immense, I was still wondering about doing something else, trying something different in 2022. To be honest, I was trying to put myself out of my comfort zone, banking on all experiences I've gained over the years.\n\nThis article captures my journey of becoming a better developer this year. I hope it inspires you somehow, and if it does, I'll appreciate you leaving a comment. Also, for some of you who are part of this journey, I want to thank you from the bottom of my heart ‚ù§Ô∏è.",
      "thumbnail": "thumbnail-1708793859418-241650391.png",
      "author": {
        "id": "346d7a36b3c41f3fbfa2",
        "firstName": "Tapas",
        "lastName": "Adhikary",
        "avatar": "avatar-1708764766479-243448656.png"
      },
      "tags": "programming, algorithm, prototype, javascript",
      "likes": [],
      "comments": [],
      "createdAt": "2024-02-24T16:57:39.425Z"
    },
    {
      "id": "965584a7b281d9f99c14",
      "title": "What do you need to know to become proficient in JavaScript?",
      "content": "JavaScript is everywhere! It's the web browser's language and helps you create web, mobile, and desktop applications. Today, JavaScript is not limited to the client side alone; it is equally popular as the base of server-side frameworks like Node.js and Deno. If you are considering picking up and mastering a programming language, JavaScript is a safe bet.\n\nRecently I have focused on chalking out a path about how to learn JavaScript effectively using a learning model. Please check it out in the video below. I believe that it will help you to learn the language faster.\n\nThe video above talks about how learning JavaScript effectively, and in this article, we will focus on the what part. We will go over the topics that you must consider putting on your plate when you plan to learn JavaScript.\n\nWe will also get introduced to a community-driven JavaScript Roadmap Guide that you can make use of in learning the language and also can contribute to. We will mention the chapters from the guide occasionally, but if you are interested, please feel free to check out the entire guide early.",
      "thumbnail": "thumbnail-1708793953356-660744456.png",
      "author": {
        "id": "346d7a36b3c41f3fbfa2",
        "firstName": "Tapas",
        "lastName": "Adhikary",
        "avatar": "avatar-1708764766479-243448656.png"
      },
      "tags": "programming, algorithm, prototype, javascript",
      "likes": [],
      "comments": [],
      "createdAt": "2024-02-24T16:59:13.363Z"
    },
    {
      "id": "210470a416ea45b625b8",
      "title": "Node.js back-end debugging process",
      "content": "Node.js Debugging Tools\nNode.js provides a range of debugging tools and techniques to debug back-end applications. Here are some of the popular ones:\n\n1. Console.log()\nConsole.log() is one of the most basic and widely used debugging techniques in Node.js. It is a simple function that logs messages to the console, which can be used to trace the execution flow and identify bugs. For example:\n\n2. Debugger Statement\nDebugger statement is a built-in Node.js debugger that stops the execution of code at a specific point and allows you to inspect variables, call stack, and execute code line by line. For example:3. Node.js Debug Module\nThe Node.js debug module is a powerful tool that provides a range of debugging options, including:\n\nBreakpoints\nConditional breakpoints\nWatch expressions\nStepping over, into, and out of functions\nHere is an example of how to use the debug module:\n\n3. Node.js Debug Module\nThe Node.js debug module is a powerful tool that provides a range of debugging options, including:\n\nBreakpoints\nConditional breakpoints\nWatch expressions\nStepping over, into, and out of functions\nHere is an example of how to use the debug module:\n\n",
      "thumbnail": "thumbnail-1708794403625-465722215.png",
      "author": {
        "id": "7830e5903b889750f1e3",
        "firstName": "Sumit",
        "lastName": "Saha",
        "avatar": "avatar-1708764729322-387087910.png"
      },
      "tags": "programming, algorithm, prototype, javascript",
      "likes": [],
      "comments": [],
      "createdAt": "2024-02-24T17:06:43.629Z"
    },
    {
      "id": "a44eb33344f45052a82c",
      "title": "hi hello ",
      "content": "zdzdfdfz",
      "thumbnail": null,
      "author": {
        "id": "ada864bc60e6e87bf05c",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": null
      },
      "tags": "zzsds, sdzsd",
      "likes": [],
      "comments": [],
      "createdAt": "2024-08-13T12:15:48.442Z"
    },
    {
      "id": "8f01bac3c076e4529cd2",
      "title": "why edit",
      "content": "zdzdfdfz",
      "thumbnail": null,
      "author": {
        "id": "ada864bc60e6e87bf05c",
        "firstName": "Saad",
        "lastName": "Hasan",
        "avatar": null
      },
      "tags": "zzsds, sdzsd",
      "likes": [],
      "comments": [],
      "createdAt": "2024-08-13T12:15:49.459Z"
    }
  ]
}